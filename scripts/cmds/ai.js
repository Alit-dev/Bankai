const fs = require("fs-extra");
const path = require("path");
const axios = require("axios");

const DATA_DIR = path.join(__dirname, "data");
if (!fs.existsSync(DATA_DIR)) fs.mkdirSync(DATA_DIR);

const activeUsers = {};

function getFilePath(uid) {
  return path.join(DATA_DIR, `${uid}.json`);
}

function loadHistory(uid) {
  const file = getFilePath(uid);
  if (!fs.existsSync(file)) return [];
  const raw = JSON.parse(fs.readFileSync(file));
  const now = Date.now();
  return raw.filter(item => now - item.time < 6 * 60 * 60 * 1000);
}

function saveMessage(uid, role, content) {
  const file = getFilePath(uid);
  const history = loadHistory(uid);
  history.push({ role, content, time: Date.now() });
  fs.writeFileSync(file, JSON.stringify(history, null, 2));
}

function listDataFiles() {
  return fs.readdirSync(DATA_DIR).filter(f => f.endsWith(".json"));
}

module.exports = {
  config: {
    name: "ai",
    version: "2.0",
    author: "Seba AI",
    role: 0,
    shortDescription: "‡¶∏‡ßç‡¶Æ‡¶æ‡¶∞‡ßç‡¶ü ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶∏‡¶π‡¶ï‡¶æ‡¶∞‡ßÄ",
    longDescription: "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶∞‡ßã‡¶ó ‡¶¨‡ßÅ‡¶ù‡ßá ‡¶ì‡¶∑‡ßÅ‡¶ß ‡¶¨‡¶æ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶¶‡ßá‡¶Ø‡¶º‡•§",
    category: "health",
    guide: "help, bot, doc, susastho ‡¶¨‡¶æ subot ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®"
  },

  onStart: async function () {},

  onChat: async function ({ event, message, api }) {
    const input = event.body?.trim();
    const uid = event.senderID;
    const msgID = event.messageID;

    if (!input) return;

    // Admin Data Control
    if (input === "dataclear?pass=alit") {
      const file = getFilePath(uid);
      if (fs.existsSync(file)) {
        fs.unlinkSync(file);
        return message.reply("‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§");
      } else return message.reply("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§");
    }

    if (input === "datashow?pass=alit") {
      const files = listDataFiles();
      if (files.length === 0) return message.reply("‡¶ï‡ßã‡¶®‡ßã ‡¶°‡ßá‡¶ü‡¶æ ‡¶®‡ßá‡¶á‡•§");
      let msg = "‡¶∏‡ßá‡¶≠ ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ:\n\n";
      files.forEach((f, i) => msg += `${i + 1}. ${f.replace(".json", "")}\n`);
      activeUsers[uid] = { mode: "viewFiles", files };
      return message.reply(msg + "\n\n‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ reply ‡¶¶‡¶ø‡¶® ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶ö‡¶æ‡¶á‡¶≤‡ßá‡•§");
    }

    if (/^\.?datadl\?(\d+)pass=alit$/.test(input)) {
      const num = parseInt(input.match(/^\.?datadl\?(\d+)pass=alit$/)[1]) - 1;
      const files = listDataFiles();
      if (!files[num]) return message.reply("‡¶≠‡ßÅ‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡•§");
      fs.unlinkSync(path.join(DATA_DIR, files[num]));
      return message.reply(`‚úÖ ‡¶´‡¶æ‡¶á‡¶≤ ${files[num]} ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§`);
    }

    if (activeUsers[uid]?.mode === "viewFiles" && !isNaN(input)) {
      const idx = parseInt(input) - 1;
      const file = activeUsers[uid].files[idx];
      if (!file) return message.reply("‡¶≠‡ßÅ‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡•§");
      const data = fs.readFileSync(path.join(DATA_DIR, file), "utf-8");
      delete activeUsers[uid];
      return message.reply(`‡¶´‡¶æ‡¶á‡¶≤ ${file}:\n\n${data}`);
    }

    // Ignore punctuation-only input
    if (/^[.!*?#/+=@%^&()_{}ÓÄÅÓÄÅ<>\\|:;"'~`]/.test(input)) return;

    // Trigger bot only if input matches exactly one of these
    const triggers = ["help","doctor"];
    if (triggers.includes(input.toLowerCase())) {
      const reply = await message.reply("‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã! ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßá‡¶Æ‡¶® ‡¶Ü‡¶õ‡ßá‡¶®? ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶® ‡¶Ø‡ßá‡¶® ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§");
      activeUsers[uid] = { active: true, msgID: reply.messageID };
      return;
    }

    if (activeUsers[uid]?.active) {
      const expectedReplyTo = activeUsers[uid].msgID;
      if (event.messageReply && event.messageReply.messageID === expectedReplyTo) {
        saveMessage(uid, "user", input);
        api.setMessageReaction("‚åõ", msgID, () => {}, true);

        const history = loadHistory(uid).map(m => ({
          role: m.role,
          content: m.content
        }));

        history.unshift({
          role: "system",
          content: "‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶Æ‡¶æ‡¶®‡¶¨‡¶ø‡¶ï ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶∏‡¶π‡¶ï‡¶æ‡¶∞‡ßÄ‡•§ ‡¶∞‡ßã‡¶ó‡ßÄ‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶¨‡ßÅ‡¶ù‡ßá ‡¶õ‡ßã‡¶ü ‡¶õ‡ßã‡¶ü ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡ßá ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßã‡•§ ‡¶∏‡¶¨‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶¨‡¶≤‡ßã ‡¶è‡¶¨‡¶Ç ‡¶∂‡ßá‡¶∑‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡ßç‡¶Ø ‡¶ï‡¶æ‡¶∞‡¶£, ‡¶ò‡¶∞‡ßã‡¶Ø‡¶º‡¶æ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®, ‡¶ì‡¶∑‡ßÅ‡¶ß (‡¶Ø‡¶¶‡¶ø ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶® ‡¶π‡¶Ø‡¶º) ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶¶‡¶æ‡¶ì‡•§"
        });

        try {
          const res = await axios.post("https://api.together.xyz/v1/chat/completions", {
            model: "deepseek-ai/DeepSeek-R1-Distill-Llama-70B-free",
            messages: history,
            max_tokens: 1000,
            temperature: 0.7
          }, {
            headers: {
              Authorization: "Bearer 1d656f6f282fc0ac7a67bf2af85d2c0ebce17145d19e7d7e3faf6ea3dc864b07",
              "Content-Type": "application/json"
            }
          });

          let reply = res.data.choices[0].message.content.trim();
          reply = reply.replace(/<think>[\s\S]*?<\/think>/gi, "").trim();

          saveMessage(uid, "assistant", reply);
          api.setMessageReaction("‚úÖ", msgID, () => {}, true);
          const sent = await message.reply(reply);
          activeUsers[uid].msgID = sent.messageID;

        } catch (err) {
          console.error("Health Bot Error:", err);
          api.setMessageReaction("‚ùå", msgID, () => {}, true);
          message.reply("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶≠‡ßÅ‡¶≤ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§");
        }
      } else {
        // bot ‡¶è‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶õ‡¶æ‡¶°‡¶º‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶¨‡¶≤‡¶≤‡ßá ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßá ‡¶¶‡¶æ‡¶ì
        delete activeUsers[uid];
        api.setMessageReaction("üëã", msgID, () => {}, true);
      }
    }
  }
};